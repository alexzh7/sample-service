// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/dvdstore.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DvdstoreClient is the client API for Dvdstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DvdstoreClient interface {
	// GetCustomers returns list of all Customers limited by provided limit
	GetCustomers(ctx context.Context, in *GetCustomersReq, opts ...grpc.CallOption) (*GetCustomersRes, error)
	// GetCustomer returns Customer by provided id
	GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerRes, error)
	// AddCustomer adds passed Customer and returns his id.
	// Passed customer "Id" field is ignored
	AddCustomer(ctx context.Context, in *AddCustomerReq, opts ...grpc.CallOption) (*AddCustomerRes, error)
	// DeleteCustomer deletes Customer by provided id.
	// Returns empty response if no errors were met
	DeleteCustomer(ctx context.Context, in *DeleteCustomerReq, opts ...grpc.CallOption) (*DeleteCustomerRes, error)
	// GetProducts returns list of all Products limited by provided limit
	GetProducts(ctx context.Context, in *GetProductsReq, opts ...grpc.CallOption) (*GetProductsRes, error)
	// GetProduct returns Product by provided id
	GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRes, error)
	// AddProduct adds passed Product and returns his id
	// Passed product "Id" field is ignored
	AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*AddProductRes, error)
	// DeleteProduct deletes Product by provided id.
	// Returns empty response if no errors were met
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductRes, error)
	// GetOrder gets order by provided id
	GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderRes, error)
	// GetCustomerOrders returns customer orders by provided customer id
	GetCustomerOrders(ctx context.Context, in *GetCustomerOrdersReq, opts ...grpc.CallOption) (*GetCustomerOrdersRes, error)
	// AddOrder adds order for passed customer id with provided products
	// and returns created order id. "Title" and "Price" fields in passed
	// ProductList are ignored
	AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderRes, error)
	// DeleteOrder deletes order with provided order id.
	// Returns empty response if no errors were met
	DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderRes, error)
}

type dvdstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDvdstoreClient(cc grpc.ClientConnInterface) DvdstoreClient {
	return &dvdstoreClient{cc}
}

func (c *dvdstoreClient) GetCustomers(ctx context.Context, in *GetCustomersReq, opts ...grpc.CallOption) (*GetCustomersRes, error) {
	out := new(GetCustomersRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/GetCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerRes, error) {
	out := new(GetCustomerRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) AddCustomer(ctx context.Context, in *AddCustomerReq, opts ...grpc.CallOption) (*AddCustomerRes, error) {
	out := new(AddCustomerRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/AddCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerReq, opts ...grpc.CallOption) (*DeleteCustomerRes, error) {
	out := new(DeleteCustomerRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) GetProducts(ctx context.Context, in *GetProductsReq, opts ...grpc.CallOption) (*GetProductsRes, error) {
	out := new(GetProductsRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRes, error) {
	out := new(GetProductRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*AddProductRes, error) {
	out := new(AddProductRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductRes, error) {
	out := new(DeleteProductRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderRes, error) {
	out := new(GetOrderRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) GetCustomerOrders(ctx context.Context, in *GetCustomerOrdersReq, opts ...grpc.CallOption) (*GetCustomerOrdersRes, error) {
	out := new(GetCustomerOrdersRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/GetCustomerOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderRes, error) {
	out := new(AddOrderRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dvdstoreClient) DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderRes, error) {
	out := new(DeleteOrderRes)
	err := c.cc.Invoke(ctx, "/proto.Dvdstore/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DvdstoreServer is the server API for Dvdstore service.
// All implementations must embed UnimplementedDvdstoreServer
// for forward compatibility
type DvdstoreServer interface {
	// GetCustomers returns list of all Customers limited by provided limit
	GetCustomers(context.Context, *GetCustomersReq) (*GetCustomersRes, error)
	// GetCustomer returns Customer by provided id
	GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerRes, error)
	// AddCustomer adds passed Customer and returns his id.
	// Passed customer "Id" field is ignored
	AddCustomer(context.Context, *AddCustomerReq) (*AddCustomerRes, error)
	// DeleteCustomer deletes Customer by provided id.
	// Returns empty response if no errors were met
	DeleteCustomer(context.Context, *DeleteCustomerReq) (*DeleteCustomerRes, error)
	// GetProducts returns list of all Products limited by provided limit
	GetProducts(context.Context, *GetProductsReq) (*GetProductsRes, error)
	// GetProduct returns Product by provided id
	GetProduct(context.Context, *GetProductReq) (*GetProductRes, error)
	// AddProduct adds passed Product and returns his id
	// Passed product "Id" field is ignored
	AddProduct(context.Context, *AddProductReq) (*AddProductRes, error)
	// DeleteProduct deletes Product by provided id.
	// Returns empty response if no errors were met
	DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductRes, error)
	// GetOrder gets order by provided id
	GetOrder(context.Context, *GetOrderReq) (*GetOrderRes, error)
	// GetCustomerOrders returns customer orders by provided customer id
	GetCustomerOrders(context.Context, *GetCustomerOrdersReq) (*GetCustomerOrdersRes, error)
	// AddOrder adds order for passed customer id with provided products
	// and returns created order id. "Title" and "Price" fields in passed
	// ProductList are ignored
	AddOrder(context.Context, *AddOrderReq) (*AddOrderRes, error)
	// DeleteOrder deletes order with provided order id.
	// Returns empty response if no errors were met
	DeleteOrder(context.Context, *DeleteOrderReq) (*DeleteOrderRes, error)
	mustEmbedUnimplementedDvdstoreServer()
}

// UnimplementedDvdstoreServer must be embedded to have forward compatible implementations.
type UnimplementedDvdstoreServer struct {
}

func (UnimplementedDvdstoreServer) GetCustomers(context.Context, *GetCustomersReq) (*GetCustomersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (UnimplementedDvdstoreServer) GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedDvdstoreServer) AddCustomer(context.Context, *AddCustomerReq) (*AddCustomerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomer not implemented")
}
func (UnimplementedDvdstoreServer) DeleteCustomer(context.Context, *DeleteCustomerReq) (*DeleteCustomerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedDvdstoreServer) GetProducts(context.Context, *GetProductsReq) (*GetProductsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedDvdstoreServer) GetProduct(context.Context, *GetProductReq) (*GetProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedDvdstoreServer) AddProduct(context.Context, *AddProductReq) (*AddProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedDvdstoreServer) DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedDvdstoreServer) GetOrder(context.Context, *GetOrderReq) (*GetOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedDvdstoreServer) GetCustomerOrders(context.Context, *GetCustomerOrdersReq) (*GetCustomerOrdersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOrders not implemented")
}
func (UnimplementedDvdstoreServer) AddOrder(context.Context, *AddOrderReq) (*AddOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedDvdstoreServer) DeleteOrder(context.Context, *DeleteOrderReq) (*DeleteOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedDvdstoreServer) mustEmbedUnimplementedDvdstoreServer() {}

// UnsafeDvdstoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DvdstoreServer will
// result in compilation errors.
type UnsafeDvdstoreServer interface {
	mustEmbedUnimplementedDvdstoreServer()
}

func RegisterDvdstoreServer(s grpc.ServiceRegistrar, srv DvdstoreServer) {
	s.RegisterService(&Dvdstore_ServiceDesc, srv)
}

func _Dvdstore_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/GetCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).GetCustomers(ctx, req.(*GetCustomersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).GetCustomer(ctx, req.(*GetCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/AddCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).AddCustomer(ctx, req.(*AddCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).DeleteCustomer(ctx, req.(*DeleteCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).GetProducts(ctx, req.(*GetProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).GetProduct(ctx, req.(*GetProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).AddProduct(ctx, req.(*AddProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).DeleteProduct(ctx, req.(*DeleteProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).GetOrder(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_GetCustomerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).GetCustomerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/GetCustomerOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).GetCustomerOrders(ctx, req.(*GetCustomerOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).AddOrder(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dvdstore_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdstoreServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dvdstore/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdstoreServer).DeleteOrder(ctx, req.(*DeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dvdstore_ServiceDesc is the grpc.ServiceDesc for Dvdstore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dvdstore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dvdstore",
	HandlerType: (*DvdstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomers",
			Handler:    _Dvdstore_GetCustomers_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _Dvdstore_GetCustomer_Handler,
		},
		{
			MethodName: "AddCustomer",
			Handler:    _Dvdstore_AddCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _Dvdstore_DeleteCustomer_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Dvdstore_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Dvdstore_GetProduct_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _Dvdstore_AddProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Dvdstore_DeleteProduct_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Dvdstore_GetOrder_Handler,
		},
		{
			MethodName: "GetCustomerOrders",
			Handler:    _Dvdstore_GetCustomerOrders_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _Dvdstore_AddOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Dvdstore_DeleteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dvdstore.proto",
}
